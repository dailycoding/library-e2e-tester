// Code generated by go-bindata.
// sources:
// fixtures/group/group.json
// fixtures/identify/identify.json
// fixtures/page/page.json
// fixtures/track/track.json
// DO NOT EDIT!

package tester

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesGroupGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\x31\x8e\x83\x30\x10\x45\x7b\x9f\x62\x34\xf5\x16\xab\xa5\xd9\x70\x03\xfa\x5c\xc0\x81\x2f\xb0\x62\x6c\xcb\x1e\x0a\x0b\xf9\xee\xd1\x98\xd0\xbe\x79\x7a\xf3\x4f\x43\xc4\x52\x13\x78\x24\x5e\x73\x3c\x12\xff\x28\x3a\x0a\xf2\xb4\x28\x4c\xd9\x0a\xf0\xbe\x70\x37\x2e\x5e\xb0\xee\x08\x72\x71\xc9\xd6\x49\xe1\x91\xb4\x47\xc4\xc1\xee\xbd\x38\x05\x27\x98\xb7\x2e\x11\xb1\x0b\xcb\x51\x24\x57\x3d\x3d\x31\x6f\x21\xfa\xb8\xd6\xfb\x8a\x3d\xf9\x58\x01\xed\x0c\x7f\x8f\x2f\x4d\xde\x06\xf5\x11\x04\x39\x65\x57\x70\xfb\x12\xc5\x7a\x7a\x39\xef\xa1\x8b\xfe\x87\xdf\xfb\x4d\x1f\x78\x9e\x6e\x69\x8d\x0d\x51\x33\xcd\x7c\x02\x00\x00\xff\xff\x2f\x3b\x70\x18\xe9\x00\x00\x00")

func fixturesGroupGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesGroupGroupJson,
		"fixtures/group/group.json",
	)
}

func fixturesGroupGroupJson() (*asset, error) {
	bytes, err := fixturesGroupGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/group/group.json", size: 233, mode: os.FileMode(420), modTime: time.Unix(1520891547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesIdentifyIdentifyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\xf2\x8c\x38\x40\x27\x36\xc4\xc6\x15\xd2\xc6\x08\x8b\xc6\x8d\x12\x77\xa8\xa2\xdc\x1d\x25\x15\xac\xcf\xff\xfb\x57\x07\x90\x1d\x89\x69\x02\x49\x60\x35\x79\x1d\x74\xe9\xba\x17\xce\x8f\xd0\x3d\x65\x6f\xcc\x9f\x93\x2d\x7b\xb1\x42\x13\x7a\x15\x20\xf5\x71\x94\x9f\x6c\x9c\x71\x97\x79\xde\xb4\x8c\x28\x40\x1c\xbd\xac\xe3\x45\xbf\xde\x44\xc5\x78\x79\x5f\x97\x2d\xfe\x12\x69\xf5\x7a\x6e\x70\x94\xfd\xcf\x32\x86\x6b\x95\xd0\x1a\x39\xa0\xb9\xe6\xbe\x01\x00\x00\xff\xff\x9a\xe7\x17\x53\xac\x00\x00\x00")

func fixturesIdentifyIdentifyJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesIdentifyIdentifyJson,
		"fixtures/identify/identify.json",
	)
}

func fixturesIdentifyIdentifyJson() (*asset, error) {
	bytes, err := fixturesIdentifyIdentifyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/identify/identify.json", size: 172, mode: os.FileMode(420), modTime: time.Unix(1519863895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesPagePageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x4e\x61\x79\xae\x92\x9d\x13\x34\x27\xe8\x8c\x88\xd5\x58\x85\x80\x88\x2b\x54\x51\xee\x5e\xe1\x34\xeb\xf3\xfb\xcf\xcd\x00\xa0\x7c\x32\xa1\x05\xcc\xee\x49\x78\x1b\x64\x77\x51\xc9\x3d\xc5\x3f\x79\x1f\x54\x96\x55\xad\xe2\x84\xe8\x75\xe2\x5c\x52\xa6\x22\x4c\x07\x5a\x18\xb1\x91\x63\x09\xba\x7e\x50\xf0\x29\x12\x7c\x61\xd9\x59\xc8\x6f\xba\x19\xb1\x12\xc6\x7d\x13\xc9\x76\x9e\x6b\xad\x13\x9f\xc2\xe4\x53\xbc\x24\xd6\x6f\xad\xf1\xda\x3b\x1a\x80\x6e\xba\xf9\x05\x00\x00\xff\xff\xff\x51\xc4\xf5\xaf\x00\x00\x00")

func fixturesPagePageJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesPagePageJson,
		"fixtures/page/page.json",
	)
}

func fixturesPagePageJson() (*asset, error) {
	bytes, err := fixturesPagePageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/page/page.json", size: 175, mode: os.FileMode(420), modTime: time.Unix(1519862211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesTrackTrackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x31\x0a\x02\x31\x10\x45\xfb\x9c\xe2\x33\xb5\x27\xd8\xce\x46\xb0\x13\xdc\x0b\x8c\xd9\x29\xc2\xae\x49\x98\x9d\x08\x12\x72\x77\x99\x45\xb1\x7d\xef\xf1\xf9\x3d\x00\x64\xef\x2a\x34\x81\x4c\x39\xae\x74\x72\x24\x2f\xc9\xe6\xec\x9e\x9e\x75\x13\xcc\x7f\xd5\x76\xd1\xeb\xe2\xae\x2a\x9b\xc8\x17\x57\x2d\x55\xd4\x92\xec\x34\xc1\x67\x01\x4a\x47\xd6\x7b\x5a\xc6\x38\x2a\xef\x36\xce\x4e\x6f\x5a\x70\xce\xb9\xf1\xf6\x33\x1c\x63\x69\xd9\x66\x7f\x83\x09\x74\xe1\x28\x8f\x52\x56\x0a\xc0\x08\x23\x7c\x02\x00\x00\xff\xff\xad\x23\x77\x22\xac\x00\x00\x00")

func fixturesTrackTrackJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesTrackTrackJson,
		"fixtures/track/track.json",
	)
}

func fixturesTrackTrackJson() (*asset, error) {
	bytes, err := fixturesTrackTrackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/track/track.json", size: 172, mode: os.FileMode(420), modTime: time.Unix(1519861826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/group/group.json":       fixturesGroupGroupJson,
	"fixtures/identify/identify.json": fixturesIdentifyIdentifyJson,
	"fixtures/page/page.json":         fixturesPagePageJson,
	"fixtures/track/track.json":       fixturesTrackTrackJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"group": &bintree{nil, map[string]*bintree{
			"group.json": &bintree{fixturesGroupGroupJson, map[string]*bintree{}},
		}},
		"identify": &bintree{nil, map[string]*bintree{
			"identify.json": &bintree{fixturesIdentifyIdentifyJson, map[string]*bintree{}},
		}},
		"page": &bintree{nil, map[string]*bintree{
			"page.json": &bintree{fixturesPagePageJson, map[string]*bintree{}},
		}},
		"track": &bintree{nil, map[string]*bintree{
			"track.json": &bintree{fixturesTrackTrackJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
